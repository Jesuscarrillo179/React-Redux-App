{"version":3,"sources":["components/AdviceTeller.js","store/actions/adviceActions.js","App.js","serviceWorker.js","store/reducers/adviceReducer.js","store/reducers/index.js","index.js"],"names":["connect","state","console","log","advice","isFetching","error","fetchAdvice","dispatch","type","axios","get","then","res","payload","data","slip","catch","err","response","status","props","className","color","height","width","onClick","App","Boolean","window","location","hostname","match","initialState","combineReducers","action","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sQAgCeA,eATS,SAAAC,GAEpB,OADAC,QAAQC,IAAIF,GACL,CACHG,OAAQH,EAAMG,OAAOA,OACrBC,WAAYJ,EAAMG,OAAOC,WACzBC,MAAOL,EAAMG,OAAOE,SAIY,CAAEC,YC9Bf,WACvB,OAAO,SAAAC,GACHA,EAAS,CAAEC,KAAM,uBACjBC,IAAMC,IAAI,qCAAqCC,MAAK,SAAAC,GAChDL,EAAS,CAAEC,KAAM,uBAAwBK,QAASD,EAAIE,KAAKC,KAAKZ,YACjEa,OAAM,SAAAC,GACLV,EAAS,CAAEC,KAAM,uBAAwBK,QAAQ,SAAD,OAAWI,EAAIC,SAASC,OAAxB,aAAmCF,EAAIC,SAASJ,cDwB7Ff,EA1BM,SAAAqB,GACjB,OACI,oCACA,yBAAKC,UAAU,cACX,yBAAKA,UAAU,cACVD,EAAMhB,YACH,kBAAC,IAAD,CAAQI,KAAK,YAAYc,MAAM,MAAMC,OAAQ,GAAIC,MAAO,KAE3DJ,EAAMjB,QAAU,gCAAMiB,EAAMjB,OAAZ,KAChBiB,EAAMf,OAAS,uBAAGgB,UAAU,SAASD,EAAMf,SAGpD,yBAAKgB,UAAU,SAASI,QAASL,EAAMd,aAAvC,mB,MEJOoB,MAVf,WACE,OACE,yBAAKL,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,SCIYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBClBAC,EAAe,CACjB7B,OAAQ,GACRC,YAAY,EACZC,MAAO,ICAI4B,cAAgB,CAC7B9B,ODE2B,WAAmC,IAAlCH,EAAiC,uDAAzBgC,EAAcE,EAAW,uCAC3D,OAAQA,EAAO1B,MACX,IAAK,qBACD,OAAO,eACAR,EADP,CAEII,YAAY,IAEpB,IAAK,uBACD,OAAO,eACAJ,EADP,CAEII,YAAY,EAEZD,OAAQ+B,EAAOrB,QACfR,MAAO,KAEf,IAAK,uBACD,OAAO,eACAL,EADP,CAEII,YAAY,EACZC,MAAO6B,EAAOrB,UAEtB,QACA,OAAOb,M,QEnBTmC,EAAQC,YAAYC,EAAaC,YAAgBC,MAEvDC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,eAAe,SHoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAX,GACLJ,QAAQI,MAAMA,EAAM4C,c","file":"static/js/main.ff621eda.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { fetchAdvice } from '../store/actions/adviceActions'\r\nimport Loader from 'react-loader-spinner'\r\n\r\n\r\nconst AdviceTeller = props => {\r\n    return(\r\n        <>\r\n        <div className=\"adviceCard\">\r\n            <div className=\"adviceText\">\r\n                {props.isFetching && (\r\n                    <Loader type=\"ThreeDots\" color=\"red\" height={50} width={50} />\r\n                )}\r\n                {props.advice && <h1>\"{props.advice}\"</h1>}\r\n                {props.error && <p className=\"error\">{props.error}</p>}\r\n            </div>\r\n        </div>\r\n        <div className=\"button\" onClick={props.fetchAdvice}>Seek Advice</div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    console.log(state)\r\n    return {\r\n        advice: state.advice.advice,\r\n        isFetching: state.advice.isFetching,\r\n        error: state.advice.error\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchAdvice })(AdviceTeller)","import axios from 'axios'\r\n\r\nexport const fetchAdvice = () => {\r\n    return dispatch => {\r\n        dispatch({ type: 'FETCH_ADVICE_START' })\r\n        axios.get('https://api.adviceslip.com/advice').then(res => {\r\n            dispatch({ type: 'FETCH_ADVICE_SUCCESS', payload: res.data.slip.advice})\r\n        }).catch(err =>{\r\n            dispatch({ type: 'FETCH_ADVICE_FAILURE', payload: `Error ${err.response.status}: ${err.response.data}`})\r\n        })\r\n    }\r\n}","import React from 'react';\r\nimport AdviceTeller from './components/AdviceTeller';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <AdviceTeller />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initialState = {\r\n    advice: '',\r\n    isFetching: false,\r\n    error: ''\r\n}\r\n\r\nexport const adviceReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_ADVICE_START':\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            }\r\n        case 'FETCH_ADVICE_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                \r\n                advice: action.payload,\r\n                error: ''\r\n            }\r\n        case 'FETCH_ADVICE_FAILURE':\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                error: action.payload\r\n            }\r\n        default:\r\n        return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { adviceReducer as advice} from './adviceReducer';\r\n\r\nexport default combineReducers({\r\n  advice\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport rootReducer from './store/reducers';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}